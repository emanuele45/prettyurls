<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">

<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
	<id>el:prettyurls</id>
	<version>0.8.4</version>

	<file name="$boarddir/index.php">
		<operation>
			<search position="replace"><![CDATA[
// Clean the request variables, add slashes, etc.
cleanRequest();
$context = array();
]]></search>
			<add><![CDATA[
// Unserialize the array of pretty board URLs
$context = array('pretty' => array(
	'action_array' => unserialize($modSettings['pretty_action_array']),
	'board_urls' => unserialize($modSettings['pretty_board_urls']),
	'db_count' => 0,
));
// Clean the request variables, add slashes, etc.
cleanRequest();
]]></add>
		</operation>
	</file>

	<file name="$boarddir/SSI.php">
		<operation>
			<search position="replace"><![CDATA[
// Clean the request variables.
]]></search>
			<add><![CDATA[
// Unserialize the array of pretty board URLs
$context = array('pretty' => array(
	'action_array' => unserialize($modSettings['pretty_action_array']),
	'board_urls' => unserialize($modSettings['pretty_board_urls']),
	'db_count' => 0,
));
// Clean the request variables.
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/Admin.php">
		<operation>
			<search position="before"><![CDATA[
				'theme' => array(
					'label' => $txt['theme_admin'],
					'file' => 'Themes.php',
					'function' => 'ThemesMain',
					'custom_url' => $scripturl . '?action=admin;area=theme;sa=admin',
					'icon' => 'themes.gif',
					'subsections' => array(
						'admin' => array($txt['themeadmin_admin_title']),
						'list' => array($txt['themeadmin_list_title']),
						'reset' => array($txt['themeadmin_reset_title']),
						'edit' => array($txt['themeadmin_edit_title']),
					),
				),
]]></search>
			<add><![CDATA[
				'pretty' => array(
					'label' => $txt['pretty_admin_menu'],
					'file' => 'PrettyUrls.php',
					'function' => 'PrettyInterface',
					'custom_url' => $scripturl . '?action=admin;area=pretty',
				),
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/ManageErrors.php">
		<operation>
			<search position="replace"><![CDATA[
	$context['sub_template'] = 'error_log';
]]></search>
			<add><![CDATA[
	$context['sub_template'] = 'error_log';

	//	Don't rewrite any URLs, we need these ones to remain exact!
	$modSettings['pretty_enable_filters'] = false;
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/ManageSettings.php">
		<operation>
			<search position="replace"><![CDATA[
			array('check', 'queryless_urls'),
]]></search>
			<add><![CDATA[
			//	Pretty URLs mod - disable the default queryless URLs
			//	array('check', 'queryless_urls'),
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/News.php">
		<operation>
			<search position="replace"><![CDATA[
	if ($xml_format == 'smf' || isset($_REQUEST['debug']))
]]></search>
			<add><![CDATA[
	//	Pretty URLs need to be rewritten
	ob_start('ob_sessrewrite');
	$context['pretty']['search_patterns'][] = '~(<link>|<id>|<comments>|<guid>)([^#<]+)~';
	$context['pretty']['replace_patterns'][] = '~(<link>|<id>|<comments>|<guid>)([^<]+)~';

	if ($xml_format == 'smf' || isset($_REQUEST['debug']))
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/QueryString.php">
		<operation>
			<search position="replace"><![CDATA[
function ob_sessrewrite($buffer)
{
	global $scripturl, $modSettings, $user_info, $context;
]]></search>
			<add><![CDATA[
function ob_sessrewrite($buffer)
{
	global $scripturl, $modSettings, $user_info, $context, $db_count, $smcFunc, $sourcedir, $time_start, $txt;
]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[
	// This should work even in 4.2.x, just not CGI without cgi.fix_pathinfo.
	if (!empty($modSettings['queryless_urls']) && (!$context['server']['is_cgi'] || @ini_get('cgi.fix_pathinfo') == 1) && $context['server']['is_apache'])
	{
		// Let's do something special for session ids!
		if (defined('SID') && SID != '')
			$buffer = preg_replace('/"' . preg_quote($scripturl, '/') . '\?(?:' . SID . ';)((?:board|topic)=[^#"]+?)(#[^"]*?)?"/e', "'\"' . \$scripturl . '/' . strtr('\$1', '&;=', '//,') . '.html?' . SID . '\$2\"'", $buffer);
		else
			$buffer = preg_replace('/"' . preg_quote($scripturl, '/') . '\?((?:board|topic)=[^#"]+?)(#[^"]*?)?"/e', "'\"' . \$scripturl . '/' . strtr('\$1', '&;=', '//,') . '.html\$2\"'", $buffer);
	}

	// Return the changed buffer.
	return $buffer;
}
]]></search>
			<add><![CDATA[
	//	Rewrite the buffer with Pretty URLs!
	if ($modSettings['pretty_enable_filters'])
	{
		//	Remove the script tags now
		$context['pretty']['scriptID'] = 0;
		$context['pretty']['scripts'] = array();
		$buffer = preg_replace_callback('~<script.+?</script>~s', 'pretty_scripts_remove', $buffer);

		//	Find all URLs in the buffer
		$context['pretty']['search_patterns'][] = '~(<a[^>]+href=|<link[^>]+href=|<form[^>]+?action=)(\"[^\"#]+|\'[^\'#]+)~';
		$urls_query = array();
		$uncached_urls = array();
		foreach ($context['pretty']['search_patterns'] as $pattern)
		{
			preg_match_all($pattern, $buffer, $matches, PREG_PATTERN_ORDER);
			foreach ($matches[2] as $match)
			{
				//	Rip out everything that shouldn't be cached
				$match = preg_replace(array('~^[\"\']|PHPSESSID=[^;]+|sesc=[^;]+~', '~\"~', '~;+|=;~', '~\?;~', '~\?$|;$|=$~'), array('', '%22', ';', '?', ''), $match);
				$url_id = str_replace(array($scripturl . '?board=', $scripturl . '?topic=', $scripturl . '?action=', $scripturl), array('`B', '`T', '`A', '`S'), $match);
				$urls_query[] = $url_id;
				$uncached_urls[$url_id] = array(
					'url' => $match,
					'url_id' => $url_id
				);
			}
		}

		//	Procede only if there are actually URLs in the page
		if (count($urls_query) != 0)
		{
			$urls_query = array_keys(array_flip($urls_query));
			//	Retrieve cached URLs
			$context['pretty']['cached_urls'] = array();
			$query = $smcFunc['db_query']('', '
				SELECT url_id, replacement
				FROM {db_prefix}pretty_urls_cache
				WHERE url_id IN ({array_string:urls})',
				array('urls' => $urls_query));
			while ($row = $smcFunc['db_fetch_assoc']($query))
			{
				$context['pretty']['cached_urls'][$row['url_id']] = $row['replacement'];
				unset($uncached_urls[$row['url_id']]);
			}
			$smcFunc['db_free_result']($query);

			//	If there are any uncached URLs, process them
			if (count($uncached_urls) != 0)
			{
				//	Run each filter callback function on each URL
				require_once($sourcedir . '/PrettyUrls-Filters.php');
				$filter_callbacks = unserialize($modSettings['pretty_filter_callbacks']);
				foreach ($filter_callbacks as $callback)
					$uncached_urls = call_user_func($callback, $uncached_urls);

				//	Fill the cached URLs array
				$cache_data = array();
				foreach ($uncached_urls as $url_id => $url)
				{
					if (!isset($url['replacement']))
						$url['replacement'] = $url['url'];
					$url['replacement'] = str_replace(chr(18), '\'', $url['replacement']);
					$url['replacement'] = preg_replace(array('~\"~', '~;+|=;~', '~\?;~', '~\?$|;$|=$~'), array('%22', ';', '?', ''), $url['replacement']);
					$context['pretty']['cached_urls'][$url_id] = $url['replacement'];
					if (strlen($url_id) < 256 && strlen($url['replacement']) < 256)
						$cache_data[] = array($url_id, $url['replacement']);
				}

				//	Cache these URLs in the database
				if (count($cache_data) != 0)
					$smcFunc['db_insert']('replace',
						'{db_prefix}pretty_urls_cache',
						array('url_id' => 'string', 'replacement' => 'string'),
						$cache_data,
						array('url_id'));
			}

			//	Put the URLs back into the buffer
			$context['pretty']['replace_patterns'][] = '~(<a[^>]+href=|<link[^>]+href=|<form[^>]+?action=)(\"[^\"]+\"|\'[^\']+\')~';
			foreach ($context['pretty']['replace_patterns'] as $pattern)
				$buffer = preg_replace_callback($pattern, 'pretty_buffer_callback', $buffer);
		}

		//	Restore the script tags
		if ($context['pretty']['scriptID'] > 0)
			$buffer = preg_replace_callback('~' . chr(20) . '([0-9]+)' . chr(20) . '~', 'pretty_scripts_restore', $buffer);
	}

	//	Update the load times
	$pattern = '~<span class="smalltext">' . $txt['page_created'] . '([.0-9]+)' . $txt['seconds_with'] . '([0-9]+)' . $txt['queries'] . '</span>~';
	if (preg_match($pattern, $buffer, $matches))
	{
		$newTime = round(array_sum(explode(' ', microtime())) - array_sum(explode(' ', $time_start)), 3);
		$timeDiff = $newTime - (float) $matches[1];
		$queriesDiff = $db_count + $context['pretty']['db_count'] - (int) $matches[2];
		//	Remove the link if you like, I won't enforce it like others do
		$newLoadTime = '<span class="smalltext">' . $txt['page_created'] . $newTime . $txt['seconds_with'] . $db_count . $txt['queries'] . ' (<a href="http://code.google.com/p/prettyurls/">Pretty URLs</a> adds ' . $timeDiff . 's, ' . $queriesDiff . 'q)</span>';
		$buffer = str_replace($matches[0], $newLoadTime, $buffer);
	}

	// Return the changed buffer.
	return $buffer;
}

//	Remove and save script tags
function pretty_scripts_remove($match)
{
	global $context;

	$context['pretty']['scriptID']++;
	$context['pretty']['scripts'][$context['pretty']['scriptID']] = $match[0];
	return chr(20) . $context['pretty']['scriptID'] . chr(20);
}

//	A callback function to replace the buffer's URLs with their cached URLs
function pretty_buffer_callback($matches)
{
	global $context, $scripturl;

	//	Is this URL part of a feed?
	$isFeed = strpos($matches[1], '>');

	//	Remove those annoying quotes
	$matches[2] = preg_replace('~^[\"\']|[\"\']$~', '', $matches[2]);

	//	Store the parts of the URL that won't be cached so they can be inserted later
	preg_match('~PHPSESSID=[^;#&]+~', $matches[2], $PHPSESSID);
	preg_match('~sesc=[^;#]+~', $matches[2], $sesc);
	preg_match('~#.*~', $matches[2], $fragment);

	//	Rip out everything that won't have been cached
	$cacheableurl = preg_replace(array('~PHPSESSID=[^;#]+|sesc=[^;#]+|#.*$~', '~\"~', '~;+|=;~', '~\?;~', '~\?$|;$|=$~'), array('', '%22', ';', '?', ''), $matches[2]);
	$url_id = str_replace(array($scripturl . '?board=', $scripturl . '?topic=', $scripturl . '?action=', $scripturl), array('`B', '`T', '`A', '`S'), $cacheableurl);

	//	Stitch everything back together, clean it up and return
	$replacement = isset($context['pretty']['cached_urls'][$url_id]) ? $context['pretty']['cached_urls'][$url_id] : $cacheableurl;
	$replacement .= (strpos($replacement, '?') === false ? '?' : ';') . (isset($PHPSESSID[0]) ? $PHPSESSID[0] : '') . ';' . (isset($sesc[0]) ? $sesc[0] : '') . (isset($fragment[0]) ? $fragment[0] : '');
	$replacement = preg_replace(array('~;+|=;~', '~\?;~', '~\?#|;#|=#~', '~\?$|;$|#$|=$~'), array(';', '?', '#', ''), $replacement);
	return $matches[1] . ($isFeed === false ? '"' : '') . $replacement . ($isFeed === false ? '"' : '');
}

//	Put the script tags back
function pretty_scripts_restore($match)
{
	global $context;

	return $context['pretty']['scripts'][(int) $match[1]];
}
]]></add>
		</operation>
	</file>

	<file name="$sourcedir/Subs.php">
		<operation>
			<search position="replace"><![CDATA[
function redirectexit($setLocation = '', $refresh = false)
{
	global $scripturl, $context, $modSettings, $db_show_debug, $db_cache;
]]></search>
			<add><![CDATA[
function redirectexit($setLocation = '', $refresh = false, $permanent = false)
{
	global $scripturl, $context, $modSettings, $db_show_debug, $db_cache, $sourcedir;
]]></add>
		</operation>

		<operation>
			<search position="replace"><![CDATA[
	if (!empty($modSettings['queryless_urls']) && (empty($context['server']['is_cgi']) || @ini_get('cgi.fix_pathinfo') == 1) && !empty($context['server']['is_apache']))
	{
		if (defined('SID') && SID != '')
			$setLocation = preg_replace('/^' . preg_quote($scripturl, '/') . '\?(?:' . SID . ';)((?:board|topic)=[^#]+?)(#[^"]*?)?$/e', "\$scripturl . '/' . strtr('\$1', '&;=', '//,') . '.html\$2?' . SID", $setLocation);
		else
			$setLocation = preg_replace('/^' . preg_quote($scripturl, '/') . '\?((?:board|topic)=[^#"]+?)(#[^"]*?)?$/e', "\$scripturl . '/' . strtr('\$1', '&;=', '//,') . '.html\$2'", $setLocation);
	}

	if (isset($modSettings['integrate_redirect']) && function_exists($modSettings['integrate_redirect']))
		$modSettings['integrate_redirect']($setLocation, $refresh);
]]></search>
			<add><![CDATA[
	//	Redirections should be pretty too
	if ($modSettings['pretty_enable_filters'])
	{
		require_once($sourcedir . '/PrettyUrls-Filters.php');
		$url = array(0 => array('url' => $setLocation, 'url_id' => 'setLocation'));
		$filter_callbacks = unserialize($modSettings['pretty_filter_callbacks']);
		foreach ($filter_callbacks as $callback)
		{
			$pretty_url = call_user_func($callback, $url);
			if (isset($pretty_url[0]['replacement']))
				break;
		}
		if (isset($pretty_url[0]['replacement']))
			$setLocation = $pretty_url[0]['replacement'];
		$setLocation = str_replace(chr(18), '\'', $setLocation);
		$setLocation = preg_replace(array('~;+|=;~', '~\?;~', '~\?#|;#|=#~', '~\?$|;$|#$|=$~'), array(';', '?', '#', ''), $setLocation);
	}

	if (isset($modSettings['integrate_redirect']) && function_exists($modSettings['integrate_redirect']))
		$modSettings['integrate_redirect']($setLocation, $refresh);

	if ($permanent)
		header('HTTP/1.1 301 Moved Permanently');
]]></add>
		</operation>
	</file>

</modification>
